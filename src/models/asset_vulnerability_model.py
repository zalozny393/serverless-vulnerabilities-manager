from src.models.group_model import GroupModel
from src.services.database_service import PRIMARY_KEY, SORT_KEY


class AssetVulnerabilityModel(GroupModel):
    def __init__(self,
                 group: str,
                 ip: str,
                 vulnerability_id: str,
                 severity: int,
                 status: int = 0,
                 name: str = '',
                 description: str = '',
                 ):
        super().__init__(group)
        self.group_name = self.name

        self.ip = ip
        self.vulnerability_id = vulnerability_id
        self.severity = severity
        self.status = status
        self.description = description
        self.name = name
        self.type = 'AssetVulnerability'

    @staticmethod
    def generate_pk(group_name: str, status: int) -> str:
        return f'{GroupModel.generate_pk(group_name)}#AV_STATUS#{status}'

    @staticmethod
    def generate_asset_sk(asset_ip: str) -> str:
        return f'ASSET#{asset_ip}'

    @staticmethod
    def generate_composite_sk(asset_ip: str, vulnerability_id: str) -> str:
        return f'{AssetVulnerabilityModel.generate_asset_sk(asset_ip)}#VULNERABILITY#{vulnerability_id}'

    @staticmethod
    def to_item(av: 'AssetVulnerabilityModel') -> dict:
        return {**av.keys(), **{
            'severity': av.severity,
            'status': av.status,
            'name': av.name,
            'description': av.description,
            'type': av.type
        }}

    @staticmethod
    def from_item(item: dict) -> 'AssetVulnerabilityModel':
        sk_data = AssetVulnerabilityModel.parse_av_sk(item[SORT_KEY])
        return AssetVulnerabilityModel(
            group=GroupModel.get_group_name_from_pk(item[PRIMARY_KEY]),
            ip=sk_data['asset'],
            vulnerability_id=sk_data['vulnerability'],
            severity=int(item['severity']),
            description=item['description'],
            name=item['name'],
            status=int(item['status'])
        )

    @staticmethod
    def parse_av_sk(sk: str) -> dict:
        data = sk.split('#')
        if data[0] != 'ASSET' or data[2] != 'VULNERABILITY':
            raise ValueError('Wrong Sort Key')

        return {
            'asset': data[1],
            'vulnerability': data[3]
        }

    @property
    def pk(self) -> str:
        return AssetVulnerabilityModel.generate_pk(self.group_name, self.status)

    @property
    def sk(self) -> str:
        return AssetVulnerabilityModel.generate_sk(self.ip, self.vulnerability_id)
