service: vulnerability-manager

frameworkVersion: '2'
useDotenv: true

package:
  patterns:
    - '!./**'
    - './src/**'

custom:
  tableName: 'vmt-table-${self:provider.stage}'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: '20201221'
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:BatchGetItem"
            - "dynamodb:ConditionCheckItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "sqs:SendMessage"
          Resource:
            - Fn::GetAtt:
              - VulnerabilityManagerTable
              - Arn
            - Fn::GetAtt:
              - MockDataQueue
              - Arn

  environment:
    TABLE_NAME: ${self:custom.tableName}
    STAGE: ${self:provider.stage}
    DEBUG: ${strToBool(${env:DEBUG})}

plugins:
  - serverless-offline
  - serverless-python-requirements

functions:
  listGroups:
    handler: src/handlers/api/groups.get_groups
    events:
      - http:
          path: /groups
          method: get
          request:
            parameters:
              querystrings:
                username: true
  listAssetVulnerabilities:
    handler: src/handlers/api/asset_vulnerabilities.get_asset_vulnerabilities
    events:
      - http:
          path: /asset-vulnerabilities/{status}
          method: get
          request:
            parameters:
              paths:
                status: true
              querystrings:
                username: true
                asset: true
  loadMetaData:
    handler: src/handlers/load_test_data.load_meta_data
    timeout: 300
    environment:
      QUEUE_URL: { Ref: MockDataQueue }
  loadAssetVulnerabilities:
    handler: src/handlers/load_test_data.load_asset_vulnerabilities
    events:
      - sqs:
          batchSize: 1000
          maximumBatchingWindow: 30
          arn:
            Fn::GetAtt:
              - MockDataQueue
              - Arn
  cronHandler:
    runtime: nodejs12.x
    handler: cronHandler.run
    events:
      - schedule: rate(1 day) # Cronjob format is also available. Example: cron(0/2 * ? * MON-FRI *)

resources:
  Resources:
    VulnerabilityManagerTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions: 
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
        KeySchema: 
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 15
    MockDataQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "MockDataQueue"